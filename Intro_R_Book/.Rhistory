}
# 封装fun3
fun3<-function(x){
data.frame(x1=x[,1]+1,x2=rowMeans(x))
}
# 生成数据集
x <- cbind(x1=3, x2 = c(400:1, 2:500))
# 分别统计3种方法的CPU耗时。
system.time(fun1(x))
system.time(fun2(x))
system.time(fun3(x))
require(maps)
require(ggplot2)
#用直方图看下pop整体的分布
#可以发现数据分布较变化较大, 所以对pop做log转化
qplot(pop, data = us.cities, binwidth = 0000, geom = "histogram")
qplot(log(pop), data = us.cities, binwidth = 0.03, geom = "histogram")
#绘制背景地图
USA.POP <- ggplot(us.cities, aes(x = long, y = lat)) + xlim(-130, -65) + borders("state", size=0.5)+
geom_point(aes(size = log(pop), color = factor(capital), alpha = 1/50))+
#对size标度的调整参考http://docs.ggplot2.org/0.9.3.1/scale_size.html
scale_size(range=c(0, 7), name = "log(City population)")+
#对离散型颜色变量的标度调整参考http://docs.ggplot2.org/0.9.3.1/scale_manual.html
#对连续型颜色标量的标度调整参考http://docs.ggplot2.org/0.9.3.1/scale_brewer.html
#和http://docs.ggplot2.org/0.9.3.1/scale_gradient2.html
scale_color_manual(values = c("black", "red"), labels = c("state capital", "city"))+
#调整图例
guides(color = guide_legend(title=NULL)) + scale_alpha(guide = FALSE)+
#绘制标题和坐标轴
labs(x = "longtitude", y = "latitude", title = "City Population in the United States")+
theme(plot.title = element_text(size=20))
#输出图像 并用cairo包进行抗锯齿处理
ggsave(USA.POP, file = "USA_POP.png", type = "cairo", width = 10, height = 6.75)
# knitr::include_graphics("https://bookdown.org/yihui/bookdown/images/cover.jpg")
# knitr::include_graphics("https://bookdown.org/yihui/bookdown/images/cover.jpg")
# knitr::include_graphics("https://bookdown.org/yihui/bookdown/images/cover.jpg")
# knitr::include_graphics("https://bookdown.org/yihui/bookdown/images/cover.jpg")
# knitr::include_graphics("https://bookdown.org/yihui/bookdown/images/cover.jpg")
knitr::include_graphics("https://bookdown.org/yihui/bookdown/images/cover.jpg")
Homebrew：brew cask install r-app
Homebrew:brew cask install r-app
demo()
demo("oauth1-twitter", package = "httr")
yes
Yes
2
demo(graphics)
demo(plotmath)
demo(Japanese)
demo(smooth)
demo(ggplot2)
options(htmltools.dir.version = FALSE)
names(table(mtcars$mpg))[which.max(table(mtcars$mpg))]
names(table(mtcars$mpg))[which.max(table(mtcars$mpg))]
max(mtcars$mpg)
names(table(mtcars$mpg))[which.max(table(mtcars$mpg))]
max(mtcars$mpg)
mtcars$mpg
names(table(mtcars$mpg))[which.max(table(mtcars$mpg))]
max(mtcars$mpg)
mtcars$mpg
which.max(table(mtcars$mpg)
names(table(mtcars$mpg))[which.max(table(mtcars$mpg))]
max(mtcars$mpg)
mtcars$mpg
which.max(table(mtcars$mpg))
which.max(table(mtcars$mpg))
table(mtcars$mpg)
table(mtcars$mpg)
which.max(table(mtcars$mpg))
data()
str(airquality)
knitr::opts_chunk$set(echo = TRUE)
tutorial::go_interactive()
with(airquality,{
plot(x=Wind, y=Temp,
xlab="wind speed",
ylab = "Temperature")
abline(lm(Wind~Temp))
})
with(airquality,{
plot(x=Wind, y=Temp,
xlab="wind speed",
ylab = "Temperature")
abline(lm(Wind~Temp))
title("Weather in NYC")
})
install.packages("plotly")
library(plotly)
plot_ly(midwest, x = percollege, color = state, type = "box")
p <- plot_ly(iris, x = Petal.Length, y = Petal.Width,
color = Species, colors = "Set1", mode = "markers")
p
data("iris")
data(iris)
p <- plot_ly(mtcars, x = mpg, y = wt,
color = cyl, colors = "Set1", mode = "markers")
p
?plotly
?plot_ly
plot_ly(z = ~volcano)
plot_ly(z = ~volcano, type = "surface")
plot_ly(economics, x = ~date, color = I("black")) %>%
add_lines(y = ~uempmed) %>%
add_lines(y = ~psavert, color = I("red"))
p <- plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
add_markers(p, color = ~Petal.Length, size = ~Petal.Length)
add_markers(p, color = ~Species)
add_markers(p, color = ~Species, colors = "Set1")
add_markers(p, symbol = ~Species)
add_paths(p, linetype = ~Species)
library(plotly)
p <- ggplot(data=lattice::singer,aes(x=height,fill=voice.part))+
geom_density()+
facet_grid(voice.part~.)
(gg <- ggplotly(p))
#柱状图
barplot(table(airquality$Month),col=rainbow(dim(table(airquality$Month))))
barplot(table(airquality$Month),col=rainbow(dim(table(airquality$Month))),horiz=T)
#密度图
plot(density(airquality$Temp))
hist(airquality$Temp,prob=T)
lines(density(airquality$Temp),col=3,lwd=4)
#柱状图
barplot(table(airquality$Month),col=rainbow(dim(table(airquality$Month))))
barplot(table(airquality$Month),col=rainbow(dim(table(airquality$Month))),horiz=T)
#直方图
hist(airquality$Temp)
hist(airquality$Temp,breaks=10)#手动定义区间段
hist(airquality$Temp,prob=T)#众轴变成比例
#直方图
hist(airquality$Temp)
hist(airquality$Temp,breaks=15)#手动定义区间段
hist(airquality$Temp,prob=T)#众轴变成比例
#箱线图
boxplot(airquality$Temp)#竖直放置
boxplot(airquality$Temp,horizontal=T)#水平放置
#画散点图
plot(airquality$Ozone)
plot(airquality$Ozone,airquality$Wind)
head(airquality)#显示前几项
summary(airquality)#显示统计项
#饼图
pie(table(airquality$Month))
#图集
plot(airquality[,1:4])#方法1
pairs(airquality[,1:4])#方法2
install.packages('maps')
?Map
asqrt <- function(x, n) Iterate(function(t) (t + x / t) / 2, n)
asqrt(2, 30)(10) # Starting from a positive value => +sqrt(2)
asqrt(2, 30)(-1) # Starting from a negative value => -sqrt(2)
?maps
library(maps)
?maps
??maps
ca <- map("county", "ca", plot = FALSE, fill = TRUE)
tidy(ca)
qplot(long, lat, data = ca, geom = "polygon", group = group)
ca <- map("county", "ca", plot = FALSE, fill = TRUE)
tidy(ca)
qplot(long, lat, data = md, geom = "polygon", group = group)
ca <- map("county", "md", plot = FALSE, fill = TRUE)
tidy(ca)
qplot(long, lat, data = md, geom = "polygon", group = group)
plot(ChickWeight)
plot(ChickWeight)
library(MASS)
plot(UScereal$sugars, UScereal$Calories)
title("plot(UScereal$sugars, UScereal$calories)”)
library(MASS)
plot(UScereal$sugars, UScereal$Calories)
title("plot(UScereal$sugars, UScereal$calories)")
# Plot whiteside data
plot(whiteside)
plot(whiteside$Insul)
plot(Cars93$Max.Price, Cars93$Price,col="red",pch=17)
plot(Cars93$Max.Price, Cars93$Price,col="red",pch=17)
points(Cars93$Min.Price,Cars93$Price,col="blue",pch=16)
plot(Cars93$Max.Price, Cars93$Price,col="red",pch=17)
points(Cars93$Min.Price,Cars93$Price,col="blue",pch=16)
abline(a = 0, b = 1, lty = 2)
glimpse(Animals2)
glimpse(Animals)
glimpse(animals)
par(mfrow = c(1,2))
plot(airquality$Ozone)
# Add the first title
title("Original representation")
plot(airquality$Wind, airquality$Temp)
# Add the second title
title("Log-log plot")
par(mfrow = c(1,2))
plot(airquality$Ozone)
# Add the first title
title("图一")
plot(airquality$Wind, airquality$Temp)
# Add the second title
title("图二")
par(mfrow = c(1,2))
plot(airquality$Ozone)
# Add the first title
title("Figure 1")
plot(airquality$Wind, airquality$Temp)
# Add the second title
title("Figure 2")
# Set up a side-by-side plot array
par(mfrow=c(1,2))
# Create a table of veh_body record counts and sort
tbl <- sort(table(dataCar$veh_body),
decreasing = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Set up a side-by-side plot array
par(mfrow=c(1,2))
# Create a histogram of counts with hist()
hist(Cars93$Horsepower,main="hist() plot")
# Create a normalized histogram with truehist()
truehist(Cars93$Horsepower,main="hist() plot")
# Set up a side-by-side plot array
par(mfrow=c(1,2))
# Create a histogram of counts with hist()
hist(Cars93$Horsepower,main="hist() plot")
# Create a normalized histogram with truehist()
truehist(Cars93$Horsepower,main="hist() plot")
# Create index16, pointing to 16-week chicks
index16 <- which(ChickWeight$Time == 16)
# Get the 16-week chick weights
weights <- ChickWeight$weight[index16]
# Plot the normalized histogram
truehist(weights)
# Add the density curve to the histogram
lines(density(weights))
# Load the car package to make qqPlot() available
library(car)
# Create index16, pointing to 16-week chicks
index16 <- which(ChickWeight$Time == 16)
# Get the 16-week chick weights
weights <- ChickWeight$weight[index16]
# Show the normal QQ-plot of the chick weights
qqPlot(weights)
# Show the normal QQ-plot of the Boston$tax data
qqPlot(Boston$tax)
# Set up a side-by-side plot array
par(mfrow=c(1,2))
# Create the standard scatterplot
plot(rad~zn,data=Boston)
# Add the title
title("Standard scatterplot")
# Create the sunflowerplot
sunflowerplot(rad~zn,data=Boston)
# Add the title
title("Sunflower plot")
# Set up a side-by-side plot array
par(mfrow=c(1,2))
# Create the standard scatterplot
plot(rad~zn,data=Boston)
# Add the title
title("Standard scatterplot")
# Create the sunflowerplot
sunflowerplot(rad~zn,data=Boston)
# Add the title
title("Sunflower plot")
# Create a variable-width boxplot with log y-axis & horizontal labels
boxplot(crim~rad, data=Boston,  las=1,log="y")
# Add a title
title("Crime rate vs. radial highway index")
# Create a variable-width boxplot with log y-axis & horizontal labels
boxplot(Temp|Month, data=airquality,  ,log="y")
names(airquality)
# Create a variable-width boxplot with log y-axis & horizontal labels
qplot(~Temp|Month, data=airquality, log="y")
?qplot
#按月份，给每一个月的温度绘箱图
#month是分类变量
boxplot(Temp~Month,airquality,xlab="month",
ylab="Temperature (F)")
# Load aplpack to make the bagplot() function available
library(aplpack)
# Load aplpack to make the bagplot() function available
library(aplpack)
# Load aplpack to make the bagplot() function available
library(aplpack)
# Load aplpack to make the bagplot() function available
library(aplpack)
# Load aplpack to make the bagplot() function available
library(aplpack)
# Load the corrplot library for the corrplot() function
library(corrplot)
# Extract the numerical variables from UScereal
numericalVars <- UScereal[, 2:10]
# Compute the correlation matrix for these variables
corrMat <- cor(numericalVars)
# Generate the correlation ellipse plot
corrplot(corrMat, method = "ellipse")
# Load the rpart library
library(rpart)
# Fit an rpart model to predict medv from all other Boston variables
model<-rpart(medv~.,data=Boston)
# Plot the structure of this decision tree model
plot(model)
# Add labels to this plot
text(model, cex = 0.7)
# Assign the return value from the par() function to plot_pars
plot_pars <- par()
# Display the names of the par() function's list elements
names(plot_pars)
# Display the number of par() function list elements
length(plot_pars)
# Set up a 2-by-2 plot array
par(mfrow = c(2, 2))
# Plot the Animals2 brain weight data as points
plot(Animals2$brain, type = "p")
with(airquality, plot(Wind, Temp,
main="Wind and Temp in NYC",
type="n"))
with(subset(airquality, Month==9),
points(Wind, Temp, col="red"))
with(subset(airquality, Month==8),
points(Wind, Temp, col="blue"))
with(subset(airquality, Month==7),
points(Wind, Temp, col="green"))
with(subset(airquality, Month %in% c(5,6)),
points(Wind, Temp, col="black"))
fit<-lm(Temp~Wind, airquality) #拟合一个回归模型
abline(fit,lwd=2) #把回归线加进去
#加入图例，说明颜色含义
legend("topright", pch=1, #右上角，空心圆点
col=c("red","blue","green","black"),
legend=c("Sep","August","July","Other"))
#使用基本函数绘图，需要事先计划，运行很多函数，
#可以直观的反映我们绘图的逻辑
#图例要仔细一一对应
knitr::opts_chunk$set(echo = TRUE)
# Load the corrplot library for the corrplot() function
library(corrplot)
# Extract the numerical variables from UScereal
numericalVars <- UScereal[, 2:10]
# Compute the correlation matrix for these variables
corrMat <- cor(numericalVars)
# Generate the correlation ellipse plot
corrplot(corrMat, method = "ellipse")
#lattice 绘图实践
library(lattice) #需要先安装install.packages("lattice")
xyplot(Temp~Ozone, data=airquality) #散点图,还没有考察交互关系
airquality$Month<-factor(airquality$Month)
#查看不同月份下，前面两个变量的关系
xyplot(Temp~Ozone|Month, data=airquality,
layout=c(5,1)) #画1行5列
q<-xyplot(Temp~Ozone, data=airquality)
q<-xyplot(Temp~Ozone, data=airquality)
q<-xyplot(Temp~Ozone, data=airquality)
xyplot(Temp~Ozone, data=airquality)
#通过改变全局参数，使面板中呈现多幅图片
par(mfrow = c(2,2)) #设置成2行两列
hist(airquality$Temp)
hist(airquality$Temp, freq = FALSE)
hist(airquality$Temp, freq = FALSE, col="blue")
hist(airquality$Temp, freq = FALSE, col="blue")
lines(density(airquality$Temp))
par(mfrow = c(1,1))
truehist(airquality$Temp)
lines(density(airquality$Temp))
library(lattice) #需要先安装install.packages("lattice")
xyplot(Temp~Ozone, data=airquality) #散点图,还没有考察交互关系
airquality$Month<-factor(airquality$Month)
#查看不同月份下，前面两个变量的关系
xyplot(Temp~Ozone|Month, data=airquality,
layout=c(5,1)) #画1行5列
# Load the corrplot library for the corrplot() function
library(corrplot)
# Extract the numerical variables from UScereal
numericalVars <- UScereal[, 2:10]
# Compute the correlation matrix for these variables
corrMat <- cor(numericalVars)
# Generate the correlation ellipse plot
corrplot(corrMat, method = "ellipse")
# 定义一个结果的数据框
df<-data.frame()
# 定义for循环
for(i in 1:nrow(x)){
row<-x[i,]                                         # 每行的值
df<-rbind(df,rbind(c(sum(row[1],1), mean(row))))   # 计算，并赋值到结果数据框
}
# 定义一个结果的数据框
df<-data.frame()
# 定义for循环
for(i in 1:nrow(x)){
row<-x[i,]                                         # 每行的值
df<-rbind(df,rbind(c(sum(row[1],1), mean(row))))    #计算，并赋值到结果数据框
}
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
# 自定义函数myFUN，第一个参数x为数据
# 第二、三个参数为自定义参数，可以通过apply的'...'进行传入。
myFUN<- function(x, c1, c2) {
c(sum(x[c1],1), mean(x[c2]))
}
# 把数据框按行做循环，每行分别传递给myFUN函数，设置c1,c2对应myFUN的第二、三个参数
apply(x,1,myFUN,c1='x1',c2=c('x1','x2'))
names(UScereal)
?plot
plot(sin, -pi, 2*pi) # see ?plot.function
plot(sin, -pi, 8*pi) # see ?plot.function
plot(cars)
plot(iris$Petal.Length, iris$Petal.Width)
knitr::opts_chunk$set(echo = TRUE)
tutorial::go_interactive()
xyplot(Petal.Width ~ Petal.Length, iris,
col = "red", pch = 8)
xyplot(Petal.Width ~ Petal.Length | Species,
iris, layout = c(1, 3))
xyplot(Petal.Width ~ Petal.Length, iris,
col = "red", pch = 8,
xlab="Width",
ylab="Length"
)
title("relationship between width and length of Iris")
xyplot(Petal.Width ~ Petal.Length, iris,
col = "red", pch = 8,
xlab="Width",
ylab="Length",
title("relationship between width and length of Iris")
)
?xyplot
xyplot(Petal.Width ~ Petal.Length, iris,
col = "red", pch = 8,
xlab="Width",
ylab="Length",
mian="relationship between width and length of Iris"
)
xyplot(Petal.Width ~ Petal.Length, iris,
col = "red", pch = 8,
xlab="Width",
ylab="Length",
mian="relationship between width and length of Iris"
)
xyplot(sin(1:100) ~ cos(1:100),
par.settings=my.settings,
main="Hello World",
type="l")
xyplot(sin(1:100) ~ cos(1:100),
main="Hello World",
type="l")
xyplot(Petal.Width ~ Petal.Length, iris,
col = "red", pch = 8,
xlab="Width",
ylab="Length",
main="relationship between width and length of Iris"
)
xyplot(Petal.Width ~ Petal.Length, iris,
col = "red", pch = 8,
xlab="Width",
ylab="Length",
main="relationship between width and length of Iris")
hist(iris$Petal.Length)
hist(iris$Petal.Length)
truehist(iris$Petal.Width)
par(mfrow = c(2,2)) #设置成2行两列
hist(airquality$Temp)
hist(airquality$Temp, freq = FALSE)
hist(airquality$Temp, freq = FALSE, col="blue")
hist(airquality$Temp, freq = FALSE, col="blue")
lines(density(airquality$Temp))
par(mfrow = c(1,1))
truehist(airquality$Temp)
lines(density(airquality$Temp))
par(mfrow = c(2,2)) #设置成2行两列
hist(airquality$Temp)
truehist(airquality$Temp, col="red")
lines(density(airquality$Wind))
hist(airquality$Wind)
truehist(airquality$Wind, col="blue")
lines(density(airquality$Wind))
par(mfrow = c(2,2)) #设置成2行两列
hist(airquality$Temp)
truehist(airquality$Temp, col="red")
lines(density(airquality$Temp))
hist(airquality$Wind)
truehist(airquality$Wind, col="blue")
lines(density(airquality$Wind))
par(mfrow(1,2))
hist(iris$Petal.Length)
truehist(iris$Petal.Width)
# Set up a side-by-side plot array
par(mfrow=c(1,2))
# Create a histogram of counts with hist()
hist(Cars93$Horsepower,main="hist() plot")
# Create a normalized histogram with truehist()
truehist(Cars93$Horsepower,main="hist() plot")
# Set up a side-by-side plot array
par(mfrow=c(1,2))
# Create a histogram of counts with hist()
hist(Cars93$Horsepower,main="hist() plot")
# Create a normalized histogram with truehist()
truehist(Cars93$Horsepower,main="hist() plot")
boxplot(mpg,data=mtcars)
boxplot(mpg, data=mtcars)
?boxplot
boxplot(mtcars$mpg)
boxplot(mpg,data=mtcars, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
par(mfrow = c(2,2)) #设置成2行两列
hist(airquality$Temp)
truehist(airquality$Temp, col="red")
lines(density(airquality$Temp))
par(mfrow = c(2,2)) #设置成2行两列
hist(airquality$Temp)
truehist(airquality$Temp, col="red")
lines(density(airquality$Temp))
hist(airquality$Wind)
truehist(airquality$Wind, col="blue")
lines(density(airquality$Wind))

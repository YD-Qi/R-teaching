# 新手上路 R Basics 1

---
output:
  html_document:
    toc: true
    number_sections: false
---

R是一种区分大小写的解释型语言。你可以在命令提示符（>）后每次输入并执行一条命令，或者一次性执行写在脚本文件中的一组命令。R中有多种数据类型，包括向量、矩阵、数据框（与数据集类似）以及列表（各种对象的集合）。

## R的数学运算：

可以当作最基本的计算器来使用。
* 加: +
* 减: -
* 乘: *
* 除: /
* 乘方: ^
* 取余数: %%

```{r}
# An addition
5 + 5
# A subtraction
5 - 5 
# A multiplication
3 * 5
 # A division
(5 + 5) / 2 
# Exponentiation
2^5
# Modulo
28%%6
```
上面这些被称作表达式expression。

## 赋值

R使用<-作为赋值符号。
简单说来，赋值就是给一些东西取个名字，这样以后方便叫它。

是这么操作的：
```{r}
my_var<-42
```

咿呀，屏幕上没有显示任何输出？
不用惊讶，我们刚刚只是赋值把my_var存起来了，不信看RStudio右上角的"environment"。
my_var可在稍后被显示和继续使用。

然后你只需要输入my_var，R Console就将42输出来：

```{r}
my_var
```

上面我们提到了对象，对象是什么呢？
一个对象可以是任何能被赋值的东西。对于R来说，对象可以是任何东西（数据、函数、图形、分析结果，等等），我们后面会详细讲解不同对象。

我们也可以使用c() 這個函数 function（c 意指是 combine）来赋值，它把多个对象放到一起，组成向量。

```{r}
#我是注释
lucky_numbers <- c(7, 77)
lucky_numbers
```

注释由符号#开头。在#之后出现的任何文本都会被R忽略而不运行。

## 使用 ? or help() 查询

输入?c 或者help(c)，在RStudio 右下角的介面 召唤出帮助文件 Help。

## 功能包

上面的c()是我们遇到的第一个函数，我们以后还会遇到许许多多的函数。而功能包则是函数的有机组合，以实现更丰富的功能。

R自带了一系列默认包（包括base、datasets、utils、grDevices、graphics、stats以及methods），它们提供了种类繁多的默认函数和数据集。其他包可通过下载来进行安装。安装好以后，它们必须被载入到会话中才能使用。命令search()可以告诉你哪些包已加载并可使用。

第一次安装一个包，使用命令install.packages()即可，例如：
```{r eval=FALSE}
install.packages("dplyr")
```

一个包仅需安装一次。但和其他软件类似，包经常被其作者更新。使用命令update.packages()可以更新已经安装的包。

要在R会话中使用包，还需要使用library()命令载入这个包：

```{r eval=FALSE}
library(dplyr)
```

当然，载入前，一定要先下载，确保有包可以调用才行。

然后我们就可以愉快的使用包了，具体来说里面的各种函数和数据。包中往往提供了演示性的小型数据集和示例代码，能够让我们尝试这些新功能。

使用 help(package="package_name")可以查看某个包的简短描述以及包中的函数名称和数据集名称的列表。使用函数help()可以查看其中任意函数或数据集的更多细节。


## 查看路径和设置路径

路径（工作路径）是我们读取数据和存贮结果的地方。
* getwd()
* setwd(yourpath)
* 或者使用RStudio右下方,Files这个tab里的齿轮来查看和更改。


## 数据类型

主要有这几种：

* 数值型 numerics (1, 2.5)
* 逻辑判断 logical (TRUE or FALSE)
* 字符型 characters
* 因子 factors

```{r}
# Change my_numeric to be 42
my_numeric <- 42

# Change my_character to be "universe"
my_character <- "universe"

# Change my_logical to be FALSE
my_logical <- FALSE

# 思考：不同的类型能加减吗？
```

因子 factors复杂一点，也非常有用，单独来讲一下。



**如何判断数据类型？**
使用 class() 函数。

示例：
```{r}
# Declare variables of different types:
my_numeric <- 42
my_character <- "universe"
my_logical <- FALSE

# Check class of my_numeric
class(my_numeric)

# Check class of my_character
class(my_character)

# Check class of my_logical
class(my_logical)
```

## 数据结构

有这么几个：vector 向量、matrix 矩阵，dataframe 数据集，list 列表。
* 向量可以构成矩阵
* 矩阵是特殊的数据集
* list 是个筐，什么都能装

### vector 向量
向量是用于存储数值型、字符型或逻辑型数据的一维数组。执行组合功能的函数c()可用来创建向量。

```{r}
a <- c(1, 2, 5, 3, 6, -2, 4)
b <- c("apple", "pear", "orange")
c <- c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)
```

这里，a是数值型向量，b是字符型向量，而c是逻辑型向量。
**注意**，单个向量中的数据必须拥有相同的类型或模式（数值型、字符型或逻辑型）。物以类聚，各从其类，同一向量中无法混杂不同模式的数据。

通过在方括号中给定元素所处位置的数值，我们可以访问向量中的元素。例如'a[c(2)]'用于访问向量a中的第二个元素。
```{r}
a[c(2)]
```


更多示例如下：
```{r}
b[c(1,3)]
c[c(2:4)]
```
最后一个语句中使用的冒号,意思是取第二个到第三元素。


### matrix 矩阵
矩阵是一个二维数组，只是每个元素都拥有相同的模式（数值型、字符型或逻辑型）。可通过函数matrix()创建矩阵。一般使用格式为：

```{r eval=FALSE}
myymatrix <- matrix(vector, nrow=number_of_rows, ncol=number_of_columns,
                    byrow=logical_value)
```
其中vector包含了矩阵的元素，nrow和ncol用以指定行和列的维数，dimnames包含了可选的、以字符型向量表示的行名和列名。选项byrow则表明矩阵应当按行填充（byrow=TRUE）还是按列填充（byrow=FALSE），默认情况下按列填充。

```{r}
myMatrix <- matrix(1:15, nrow=3, ncol=5)  
myMatrix
```

我们可以使用下标和方括号来选择矩阵中的行、列或元素。'r X[i,]'指矩阵X中的第i行，'r X[,j]'指第j列，'r X[i, j]' 指第 i 行第 j 个元素。选择多行或多列时，下标 i 和 j 可为数值型向量。

```{r}
y <- matrix(1:18, nrow=2)
y

y[2,]

y[,1]

y[2,c(3:5)]

```
矩阵都是二维的，和向量类似，矩阵中也仅能包含一种数据类型。

### dataframe 数据框
由于不同的列可以包含不同模式（数值型、字符型等）的数据，所以啊，数据框真是是个筐，什么都能装！数据框将是你在R中最常处理的数据结构。

表2-1所示的分数数据集包含了数值型和字符型数据。由于数据有多种模式，无法将此数据集放入一个矩阵。在这种情况下，使用数据框是最佳选择。

```{r}
students <- c("A", "B", "C", "D")
math_score<-c(100, 80, 70, 95)
english_score<-c(96, 86, 77, 99)
students_scores<-data.frame(students, math_score,english_score)
```

**划重点**：
* 列与列之间数据类型可以不一样，但是每一列数据类型必须一直。
* 我们在讨论数据框时将交替使用术语列和变量。
* 选取数据框中元素的方式：可以使用前述（如矩阵中的）下标记号，亦可直接指定列名，例如：

```{r}
students_scores[,2]
students_scores[,"math_score"]
students_scores$math_score
```

第三个例子中的记号$是新出现的,它被用来选取一个给定数据框中的某个特定变量。例如，如果你想生成学生名字变量students和数学成绩变量math的新数据框，使用以下代码即可：
```{r}
data.frame(students_scores$students, students_scores$math_score)
```

### 因子 factor
因子 factor又叫分类变量，有两种：名义型、有序型。
* 名义型，例如，学生的名字，它们之间是没有顺序的。
* 有序型，例如，好评，中评，差评，它们之间有顺序关系，但是没有数量关系，得不出来不同级别之间的差异具体是多少。

相对应的，像之前栗子里，分数则是一个连续性变量，呈现为某个范围内的任意值，并同时表示了顺序和数量，例如95分就是比90分要高，并且是高5分。

因子在R中非常重要，因为它决定了数据的分析方式以及如何进行视觉呈现。

函数factor()以一个整数向量的形式存储类别值，整数的取值范围是[1...k]（其中 k 是名义型变量中唯一值的个数），同时一个由字符串（原始值）组成的内部向量将映射到这些整数上。

是不是有点晕，不着急，我们看点例子：

```{r}
excellence<- c("excellent", "bad", "good", "okay", "bad")
excellence<- factor(excellence)
excellence

excellence <- factor(excellence, order=TRUE,
                     levels=c("bad", "okay","good","excellent"))
excellence
```

这里我们成功的把字符型变量excellence，先转换成了无序因子变量，再转换成了有顺序的因子变量。

数值型变量可以用levels和labels参数来编码成因子。如果男性被编码成1，女性被编码成2，则以下语句：
```{r}
sex<-c(1,2,2,1,2,1,1,3) 
sex
sex <- factor(sex, levels=c(1, 2), labels=c("Male", "Female"))
sex
```
在这个栗子里，性别被当成类别型变量，标签“Male”和“Female”替代了1和2在结果中输出，而且所有不是1或2的性别变量将被设为缺失值。

### list 列表
列表（list）是R的数据类型中最为复杂的一种。一般来说，列表就是一些对象（或成分，component）的有序集合。列表允许你整合若干（可能无关的）对象到单个对象名下。例如，某个列表中可能是若干向量、矩阵、数据框，甚至其他列表的组合。可以使用函数list()创建列表：
```{r}
a <- "My First List"
b <- c(25, 26, 18, 39)
c <- matrix(1:10, nrow=5)
d <- c("one", "two", "three")
mylist <- list(title=a ,b,c,d)
mylist
```

本例创建了一个列表，其中有四个成分：一个字符串、一个数值型向量、一个矩阵以及一个字符型向量。可以组合任意多的对象，并将它们保存为一个列表。

## 常用函数

length(object) ：显示对象中元素/成分的数量
```{r}
length(mtcars)
length(mtcars$mpg)
```

dim(object)： 显示某个对象的维度
```{r}
dim(mtcars)
```

str(object) ：显示某个对象的结构
```{r}
str(mtcars)
```
class(object)： 显示某个对象的类或类型
```{r}
class(mtcars)
```

names(object)：显示某对象中各成分的名称
```{r}
names(mtcars)
```
c(object, object,...)： 将对象合并入一个向量
```{r}
c(2, 20)
```
cbind(object, object, ...)： 按列合并对象
```{r}
cbind(students, math_score)
```
rbind(object, object, ...)： 按行合并对象
```{r}
rbind(students, math_score)
```
head(object)：列出某个对象的开始部分
```{r}
head(mtcars)
```
tail(object)：列出某个对象的最后部分
```{r}
tail(mtcars)
```
ls()： 显示当前的对象列表
```{r}
ls()
```
rm(object, object, ...)： 删除一个或更多个对象。
```{r}
rm(a, b, c)
ls()
```
rm(list = ls())：将删除当前工作环境中的几乎所有对象4








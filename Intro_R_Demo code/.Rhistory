head(data.frame(hflights),3)
filter(flights, Month==1 & DayofMonth==1)
filter(hflights, Month==1 & DayofMonth==1)
head(filter(hflights, UniqueCarrier=="AA" | UniqueCarrier=="UA"),2)
tail(filter(hflights, UniqueCarrier=="AA" | UniqueCarrier=="UA"),2)
library(dplyr)
library(hflights)
knitr::opts_chunk$set(echo = TRUE)
#简单查看数据
head(hflights,3)
# convert to a normal data frame to see all of the columns
head(data.frame(hflights),3)
hflights[hflights$Month==1 & hflights$DayofMonth==1, ]
filter(hflights, Month==1 & DayofMonth==1)
data(hflights)
head(hflights,3)
head(data.frame(hflights),3)
type(hflights)
class(hflights)
head(hflights,3)
class(hflights)
#basic R
hflights[hflights$Month==1 & hflights$DayofMonth==1, ]
#filter function from dplyr
filter(hflights, Month==1 & DayofMonth==1)
head(filter(hflights, UniqueCarrier=="AA" | UniqueCarrier=="UA"),2)
tail(filter(hflights, UniqueCarrier=="AA" | UniqueCarrier=="UA"),2)
filter(hflights, UniqueCarrier %in% c("AA", "UA"))
# for each carrier, calculate which two days of the year they had their longest departure delays
# note: smallest (not largest) value is ranked as 1, so you have to use `desc` to rank by largest value
flights %>%
group_by(UniqueCarrier) %>%
select(Month, DayofMonth, DepDelay) %>%
filter(min_rank(desc(DepDelay)) <= 2) %>%
arrange(UniqueCarrier, desc(DepDelay)) %>%
head()
#后两个样本
tail(filter(hflights, UniqueCarrier=="AA" | UniqueCarrier=="UA"),2)
#包含AA 和UA的所有样本
filter(hflights, UniqueCarrier %in% c("AA", "UA"))
# base R approach to select DepTime, ArrTime, and FlightNum columns
head(flights[, c("DepTime", "ArrTime", "FlightNum")])
# base R approach to select DepTime, ArrTime, and FlightNum columns
head(hflights[, c("DepTime", "ArrTime", "FlightNum")])
library(dplyr)
library(hhfilghts)
library(dplyr)
library(hhfilghts)
library(dplyr)
library(hhfilghts)
library(dplyr)
library(hhfilghts)
library(dplyr)
library(hfilghts)
library(dplyr)
library(hfilghts)
library(dplyr)
library(hilghts)
library(dplyr)
library(hflights)
library(dplyr)
library(hflights)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(hflights)
knitr::opts_chunk$set(echo = TRUE)
#简单查看数据
head(hfilghts,3)
library(dplyr)
library(hflights)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(hflights)
knitr::opts_chunk$set(echo = TRUE)
#简单查看数据
head(hflights,3)
#basic R
hflights[hflights$Month==1 & hflights$DayofMonth==1, ]
#filter function from dplyr
filter(hflights, Month==1 & DayofMonth==1)
#前两个样本
head(filter(hflights, UniqueCarrier=="AA" | UniqueCarrier=="UA"),2)
#后两个样本
tail(filter(hflights, UniqueCarrier=="AA" | UniqueCarrier=="UA"),2)
#包含AA 和UA的所有样本
filter(hflights, UniqueCarrier %in% c("AA", "UA"))
# base R approach to select DepTime, ArrTime, and FlightNum columns
head(hflights[, c("DepTime", "ArrTime", "FlightNum")])
# dplyr approach
print(select(hflights, DepTime, ArrTime, FlightNum),n=6)
head(select(hflights, Year:DayofMonth, contains("Taxi"), contains("Delay")))
# nesting method to select UniqueCarrier and DepDelay columns and filter for delays over 60 minutes
head(filter(select(hflights, UniqueCarrier, DepDelay), DepDelay > 60))
hflights %>%
select(UniqueCarrier, DepDelay) %>%
filter(DepDelay > 60) %>%
head()
# create two vectors and calculate Euclidian distance between them
x1 <- 1:5; x2 <- 2:6
# Usual
sqrt(sum((x1-x2)^2))
# chaining method
(x1-x2)^2 %>% sum() %>% sqrt()
# base R approach to select UniqueCarrier and DepDelay columns and sort by DepDelay
head(hflights[order(hflights$DepDelay), c("UniqueCarrier", "DepDelay")])
# dplyr approach
hflights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(DepDelay) %>% # arrange(desc(DepDelay)) for descending order
head()
# base R approach to create a new variable Speed (in mph)
hflights$Speed <- hflights$Distance / hflights$AirTime*60
head(hflights[, c("Distance", "AirTime", "Speed")])
# dplyr approach (prints the new variable but does not store it)
hflights %>%
select(Distance, AirTime) %>%
mutate(Speed = Distance/AirTime*60) %>%
head()
# store the new variable:
hflights <- hflights %>% mutate(Speed = Distance/AirTime*60)
# base R approaches to calculate the average arrival delay to each destination
head(aggregate(ArrDelay ~ Dest, hflights, mean))
# or
head(with(hflights, tapply(ArrDelay, Dest, mean, na.rm=TRUE)))
# dplyr approach: create a table grouped by Dest, and then summarise each group by taking the mean of ArrDelay
hflights %>%
group_by(Dest) %>%
summarise(avg_delay = mean(ArrDelay, na.rm=TRUE)) %>%
head()
# for each carrier, calculate the percentage of hflights cancelled or diverted
hflights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(mean), Cancelled, Diverted) %>%
head()
# for each carrier, calculate the minimum and maximum arrival and departure delays
hflights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(min(., na.rm=TRUE), max(., na.rm=TRUE)), matches("Delay")) %>%
head()
# for each day of the year, count the total number of hflights and sort in descending order
hflights %>%
group_by(Month, DayofMonth) %>%
summarise(flight_count = n()) %>%
arrange(desc(flight_count)) %>%
head()
# rewrite more simply with the `tally` function
hflights %>%
group_by(Month, DayofMonth) %>%
tally(sort = TRUE)
# for each destination, count the total number of hflights and the number of distinct planes that flew there
hflights %>%
group_by(Dest) %>%
summarise(flight_count = n(), plane_count = n_distinct(TailNum)) %>%
head()
# for each destination, show the number of cancelled and not cancelled hflights
hflights %>%
group_by(Dest) %>%
select(Cancelled) %>%
table() %>%
head()
# for each destination, show the number of cancelled and not cancelled hflights
hflights %>%
group_by(Dest) %>%
select(Cancelled) %>%
table() %>%
head()
# for each carrier, calculate which two days of the year they had their longest departure delays
# note: smallest (not largest) value is ranked as 1, so you have to use `desc` to rank by largest value
hflights %>%
group_by(UniqueCarrier) %>%
select(Month, DayofMonth, DepDelay) %>%
filter(min_rank(desc(DepDelay)) <= 2) %>%
arrange(UniqueCarrier, desc(DepDelay)) %>%
head()
# for each carrier, calculate which two days of the year they had their longest departure delays --- rewrite previous with the `top_n` function
hflights %>%
group_by(UniqueCarrier) %>%
select(Month, DayofMonth, DepDelay) %>%
top_n(2) %>%
arrange(UniqueCarrier, desc(DepDelay))
# for each carrier, calculate which two days of the year they had their longest departure delays --- rewrite previous with the `top_n` function
hflights %>%
group_by(UniqueCarrier) %>%
select(Month, DayofMonth, DepDelay) %>%
top_n(2) %>%
arrange(UniqueCarrier, desc(DepDelay))
# for each carrier, calculate which two days of the year they had their longest departure delays --- rewrite previous with the `top_n` function
hflights %>%
group_by(UniqueCarrier) %>%
select(Month, DayofMonth, DepDelay) %>%
top_n(2) %>%
arrange(UniqueCarrier, desc(DepDelay))
# base R approach to view the structure of an object
str(hflights)
# randomly sample a fraction of rows, with replacement
hflights %>% sample_frac(0.25, replace=TRUE)
# randomly sample a fixed number of rows, without replacement
hflights %>% sample_n(5)
# rewrite previous with the `tally` function
hflights %>%
group_by(Month) %>%
tally() %>%
mutate(change = n - lag(n))
# for each month, calculate the number of hflights and the change from the previous month
hflights %>%
group_by(Month) %>%
summarise(flight_count = n()) %>%
mutate(change = flight_count - lag(flight_count))
# Another example
models <- mtcars %>% group_by(cyl) %>% do(lm = lm(mpg ~ wt, data = .))
models %>% summarise(rsq = summary(lm)$r.squared)
mtcars %>% group_by(cyl) %>% do(head(.,2))
# dplyr approach: better formatting, and adapts to your screen width
glimpse(hflights)
primes_list<-list(2,3,5,7,11,13)
for (i in 1:length(primes_list)) {
print(primes_list)
}
primes_list<-list(2,3,5,7,11,13)
for (i in 1:length(primes_list)) {
print(primes_list)
}
primes_list<-list(2,3,5,7,11,13)
for (i in 1:length(primes_list)) {
print(primes_list[[i]])
}
install.packages("tutorial")
library(MASS)
library(openintro)
library(HistData)
library(ggplot2)
library(dplyr)
?Tutorial
??Tutorial
if(!require(ggplot2)) {
install.packages("ggplot2")
}
?colorRamp
?RColorBrewer
??RColorBrewer
knitr::opts_chunk$set(echo = TRUE)
#使用scale color menu 来控制颜色
#加载颜色包
library(RColorBrewer)
#如何结合RColorBrewer与colorRampPalette
cols<-brewer.pal(3,"Greens")
pal<-colorRampPalette(cols)
image(volcano,col=pal(20)) # 3个(绿)颜色端点，取值20个
View(pal)
#如何结合RColorBrewer与colorRampPalette
cols<-brewer.pal(3,"Greens")
#pal<-colorRampPalette(cols)
image(volcano,col=cols(20)) # 3个(绿)颜色端点，取值20个
#如何结合RColorBrewer与colorRampPalette
cols<-brewer.pal(3,"Greens")
#pal<-colorRampPalette(cols)
image(volcano,col=cols(20)) # 3个(绿)颜色端点，取值20个
str(mtcars)
ggplot(data = mtcars, aes(mpg)) +
geom_bar()
if(!require(ggplot2)) {
install.packages("ggplot2")
}
if(!require(MASS)) {
install.packages("MASS")
}
if(!require(dplyr)) {
install.packages("dplyr")
}
setwd("~/R Teaching/demo code/regression3/")
advertising <- read.csv("advertising.csv")
c<-100
knitr::opts_chunk$set(echo = TRUE)
SalariesIn$yrs.service        # yrs.service variable
library(faraway)      # glm support
library(MASS)         # negative binomial support
library(car)          # regression functions
library(lme4)         # random effects
library(ggplot2)      # plotting commands
library(reshape2)     # wide to tall reshaping
library(xtable)       # nice table formating
library(knitr)        # kable table formating
library(grid)         # units function for ggplot
setwd("~/R Teaching/demo code/regression2/data/")
SalariesIn <- read.table("Salaries.txt" )
str(SalariesIn)
SalariesIn$yrs.service        # yrs.service variable
SalariesIn[2,]                # second row, observation
SalariesIn$discipline[6]      # 6th observation of the discipline variable
SalariesIn[5,"yrs.service"]   # row 5 of the yrs.service variable
SalariesIn[4,3]               # row 4, column 3
SalariesIn[2:6,]              # observations 2 through 6
SalariesIn[c(7,9,16),]        # observations 7, 9, and 16
sum( is.na(SalariesIn) )
sum( SalariesIn=="" )
salary <- SalariesIn
getwd()
setwd("~/R Teaching/demo code/regression2/data/")
SalariesIn <- read.table("Salaries.txt" )
install.packages("faraway")
library(faraway)      # glm support
library(MASS)         # negative binomial support
library(car)          # regression functions
library(lme4)         # random effects
library(ggplot2)      # plotting commands
library(reshape2)     # wide to tall reshaping
library(xtable)       # nice table formating
library(knitr)        # kable table formating
library(grid)         # units function for ggplot
str(SalariesIn)
View(SalariesIn)
sum( is.na(SalariesIn) )
sum( SalariesIn=="" )
salary <- SalariesIn
salary$salary <- salary$salary / 1000
logSalary <- log(salary$salary)
salaryLevel = ifelse(salary$salary>134, "high",
ifelse(salary$salary<91, "low","middle"
) )
str(salaryLevel)
salary <- data.frame(salary,
logSalary = logSalary,
salaryLevels = factor(salaryLevel)
)
View(salary)
colnames(salary) <- c("rank","dscpl","yrSin","yrSer","sex",
"salary","logSal","salLev")
summary(salary)
salary$rank <- ordered(salary$rank, levels=c("AsstProf","AssocProf","Prof"))
salaryNum <- salary
salaryNum<-sapply(salaryNum, as.numeric)
View(salaryNum)
round( cor(salaryNum[ ,-c(8)]), 3)
ggplot(data=salary, aes(x=yrSer, y=salary)) +
geom_point() +
theme_bw() +
ggtitle("Professor's salaries from 2008-9")
ggplot(data=salary, aes(x=yrSer, y=salary)) +
geom_point() +
theme_bw() +
ggtitle("Professor's salaries from 2008-9") +
theme( plot.title=element_text(vjust=1.0) ) +
xlab("Years of service") +
theme( axis.title.x = element_text(vjust=-.5) ) +
ylab("Salary in thousands of dollars") +
theme( axis.title.y = element_text(vjust=1.0) )
plotSalFacRank <- ggplot(data=salary, aes(x=yrSer, y=salary)) +
geom_point() +
theme_bw() +
ggtitle("Professor's salaries from 2008-9") +
theme( plot.title=element_text(vjust=1.0) ) +
xlab("Years of service") +
theme( axis.title.x = element_text(vjust=-.5) ) +
ylab("Salary in thousands of dollars") +
theme( axis.title.y = element_text(vjust=1.0) ) +
facet_wrap(~rank) +
theme(strip.background = element_rect(fill = "White"))
plotSalFacRank
ggplot(data=salary, aes(x=yrSer, y=salary)) +
geom_point(aes(color=rank)) +
theme_bw() +
ggtitle("Professor's salaries from 2008-9") +
theme( plot.title=element_text(vjust=1.0) ) +
xlab("Years of service") +
theme( axis.title.x = element_text(vjust=-.5) ) +
ylab("Salary in thousands of dollars") +
theme( axis.title.y = element_text(vjust=1.0) ) +
theme(legend.position = "bottom")
plot(salary[,-c(8)])
out <- lm(salary~sex,data=salary)
summary(out)
salary$yrSinSqr <- salary$yrSin^2
salary$yrSerSqr <- salary$yrSer^2
outSin <- lm(salary~dscpl + sex + rank + yrSin+yrSinSqr,data=salary)
summary(outSin)
outSer <- lm(salary~dscpl + sex + rank + yrSer+yrSerSqr,data=salary)
summary(outSer)
step(outSin)
best<-lm(salary~dscpl + rank + yrSer+yrSerSqr,data=salary)
best<-lm(salary~dscpl + rank + yrSer+yrSerSqr,data=salary)
best
best<-lm(salary~dscpl + rank + yrSer+yrSerSqr,data=salary)
summary(best)
bestMod <- lm(salary~dscpl + rank + yrSer+yrSerSqr,data=trainingData) # build the model
set.seed(100) # 设置种子点，以便重复再现同样的结果
trainingRowIndex <- sample(1:nrow(salary), 0.8*nrow(salary))
# 将数据二八分，training vs. testing
trainingData <- salary[trainingRowIndex, ] # model training data
testData <- salary[-trainingRowIndex, ] # test data
bestMod <- lm(salary~dscpl + rank + yrSer+yrSerSqr,data=trainingData) # build the model
salaryPred <- predict(bestMod, testData) # predict distance
salaryPred <- predict(bestMod, testData) # predict distance
actuals_preds <- data.frame(cbind(actuals=testData$salary, predicteds=salaryPred)) # make actuals_predicteds dataframe.
attach(actuals_preds)
correlation_accuracy <- cor(actuals,predicteds)
correlation_accuracy
set.seed(100) # 设置种子点，以便重复再现同样的结果
trainingRowIndex <- sample(1:nrow(salary), 0.8*nrow(salary))
# 将数据二八分，training vs. testing
trainingData <- salary[trainingRowIndex, ] # model training data
testData <- salary[-trainingRowIndex, ] # test data
bestMod <- lm(salary~dscpl + rank + yrSer+yrSerSqr,data=trainingData) # build the model
salaryPred <- predict(bestMod, testData) # predict distance
actuals_preds <- data.frame(cbind(actuals=testData$salary, predicteds=salaryPred)) # make actuals_predicteds dataframe.
attach(actuals_preds)
correlation_accuracy <- cor(actuals,predicteds)
correlation_accuracy
set.seed(1000) # 设置种子点，以便重复再现同样的结果
trainingRowIndex <- sample(1:nrow(salary), 0.8*nrow(salary))
# 将数据二八分，training vs. testing
trainingData <- salary[trainingRowIndex, ] # model training data
testData <- salary[-trainingRowIndex, ] # test data
bestMod <- lm(salary~dscpl + rank + yrSer+yrSerSqr,data=trainingData) # build the model
salaryPred <- predict(bestMod, testData) # predict distance
actuals_preds <- data.frame(cbind(actuals=testData$salary, predicteds=salaryPred)) # make actuals_predicteds dataframe.
attach(actuals_preds)
correlation_accuracy <- cor(actuals,predicteds)
correlation_accuracy
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(hflights)
summarise(aa,
n_flights=n(),
n_canc=sum(Cancelled==1),
avg_delay=mean(!is.na(ArrDelay))
)
aa <- filter(hflights, UniqueCarrier == "AA")
summarise(aa,
n_flights=n(),
n_canc=sum(Cancelled==1),
avg_delay=mean(!is.na(ArrDelay))
)
summarise(aa,
n_flights=n(),
n_canc=sum(Cancelled==1),
avg_delay=mean(!is.na(ArrDelay),
avg_delay_2=mean(is.na(ArrDelay)))
)
summarise(aa,
n_flights=n(),
n_canc=sum(Cancelled==1),
avg_delay=mean(!is.na(ArrDelay),
avg_delay_2=mean(is.na(ArrDelay)))
)
summarise(aa,
n_flights=n(),
n_canc=sum(Cancelled==1),
avg_delay=mean(!is.na(ArrDelay),
avg_delay_2=mean(is.na(ArrDelay)))
)
summarise(aa,
n_flights=n(),
n_canc=sum(Cancelled==1),
avg_delay=mean(!is.na(ArrDelay),
avg_delay_2=mean(!is.na(ArrDelay)))
)
summarise(aa,
n_flights=n(),
n_canc=sum(Cancelled==1),
avg_delay=mean(!is.na(ArrDelay),
avg_delay_2=mean(ArrDelay, na.rm=TRUE))
)
summarise(aa,
n_flights=n(),
n_canc=sum(Cancelled==1),
avg_delay=mean(!is.na(ArrDelay)),
avg_delay_2=mean(ArrDelay, na.rm=TRUE)
)
v<-c(2,3,4,5)
v
v<-c(2,3,4,NA)
v
v<-c(2,3,4,NA)
v
class(v)
v<-c(2,3,4,NA)
v
class(v)
mean(v)
mean(!is.na(v))
mean(v, na.rm=TRUE)
summarise(aa,
n_flights=n(),
n_canc=sum(Cancelled==1),
avg_delay=mean(!is.na(ArrDelay)),
avg_delay_2=mean(ArrDelay, na.rm=TRUE)
)
v<-c(2,3,4,NA)
v
class(v)
mean(v)
mean(!is.na(v))
mean(v, na.rm=TRUE)
v<-c(2,3,4,NA)
v
class(v)
mean(v)
mean(!is.na(v))
mean(v, na.rm=TRUE)
v<-c(2,3,4,NA)
v
class(v)
mean(v)
mean(!is.na(v))
mean(v, na.rm=TRUE)
v<-c(2,3,4,NA)
v
class(v)
mean(v)
!is.na(v)
mean(!is.na(v))
mean(v, na.rm=TRUE)

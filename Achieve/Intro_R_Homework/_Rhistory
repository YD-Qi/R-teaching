# Given from the previous exercise
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point(shape = 1, size = 4)
# 1 - Map cyl to fill
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(shape = 1, size = 4)
# 2 - Change shape and alpha of the points in the above plot
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(shape = 21, size = 4, alpha = 0.6)
# 3 - Map am to col in the above plot
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl, col = am)) +
geom_point(shape = 21, size = 4, alpha = 0.6)
# Map cyl to size
ggplot(mtcars, aes(x=wt,y=mpg,size=cyl))+
geom_point()
# Map cyl to alpha
ggplot(mtcars, aes(x=wt,y=mpg,alpha=cyl))+
geom_point()
# Map cyl to shape
ggplot(mtcars, aes(x=wt,y=mpg,shape=cyl))+
geom_point()
# Map cyl to label
ggplot(mtcars, aes(x=wt,y=mpg,label=cyl))+
geom_text()
# Define a hexadecimal color
my_color <- "#4ABEFF"
# Draw a scatter plot with color *aesthetic*
ggplot(mtcars, aes(x=wt, y=mpg,col=cyl))+
geom_point()
# Same, but set color *attribute* in geom layer
ggplot(mtcars, aes(x=wt, y=mpg,col=cyl))+
geom_point(col=my_color)
# Set the fill aesthetic; color, size and shape attributes
ggplot(mtcars, aes(x=wt, y=mpg,fill=cyl))+
geom_point(size=10,shape=23,col=my_color)
# Expand to draw points with alpha 0.5
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(alpha=0.5)
# Expand to draw points with shape 24 and color yellow
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(shape=24,col="yellow")
# Expand to draw text with label rownames(mtcars) and color red
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(alpha=0.5,shape=24,col="red",label=rownames(mtcars))
# The base layer, cyl.am, is available for you
# Add geom (position = "stack" by default)
cyl.am +
geom_bar()
# The base layer, cyl.am, is available for you
# Add geom (position = "stack" by default)
cyl.am <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am)))
cyl.am +
geom_bar()
# Fill - show proportion
cyl.am +
geom_bar(position = "fill")
# Dodging - principles of similarity and proximity
cyl.am +
geom_bar(position = "dodge")
# Clean up the axes with scale_ functions
val = c("#E41A1C", "#377EB8")
lab = c("Manual", "Automatic")
cyl.am +
geom_bar(position = "dodge") +
scale_x_discrete("Cylinders") +
scale_y_continuous("Number") +
scale_fill_manual("Transmission",
values = val,
labels = lab)
# Fill - show proportion
cyl.am +
geom_bar(position = "fill")
# Dodging - principles of similarity and proximity
cyl.am +
geom_bar(position = "dodge")
# Clean up the axes with scale_ functions
val = c("#E41A1C", "#377EB8")
lab = c("Manual", "Automatic")
cyl.am +
geom_bar(position = "dodge") +
scale_x_discrete("Cylinders") +
scale_y_continuous("Number") +
scale_fill_manual("Transmission",
values = val,
labels = lab)
# The base layer, cyl.am, is available for you
# Add geom (position = "stack" by default)
cyl.am <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am)))
cyl.am +
geom_bar()
# Dodging - principles of similarity and proximity
cyl.am +
geom_bar(position = "dodge")
# Clean up the axes with scale_ functions
val = c("#E41A1C", "#377EB8")
lab = c("Manual", "Automatic")
cyl.am +
geom_bar(position = "dodge") +
scale_x_discrete("Cylinders") +
scale_y_continuous("Number") +
scale_fill_manual("Transmission",
values = val,
labels = lab)
# 1 - Create jittered plot of mtcars, mpg onto x, 0 onto y
ggplot(mtcars, aes(x = mpg,y=0)) + geom_point()+
geom_jitter()
# 2 - Add function to change y axis limits
ggplot(mtcars, aes(x = mpg,y=0)) + geom_point()+
geom_jitter()+
scale_y_continuous(limits=c(-2,2))
# Basic scatter plot: wt on x-axis and mpg on y-axis; map cyl to col
ggplot(mtcars,aes(x=wt, y=mpg, col=cyl))+
geom_point(size = 4)
# Hollow circles - an improvement
ggplot(mtcars,aes(x=wt, y=mpg, col=cyl))+
geom_point(size = 4,shape=1)
# Add transparency - very nice
ggplot(mtcars,aes(x=wt, y=mpg, col=cyl))+
geom_point(size = 4,shape=1,alpha=0.6)
# Scatter plot: carat (x), price (y), clarity (color)
ggplot(diamonds,aes(x=carat,y=price,col=clarity))+
geom_point()
# Adjust for overplotting
ggplot(diamonds,aes(x=carat,y=price,col=clarity))+
geom_point(alpha=0.5)
# Scatter plot: clarity (x), carat (y), price (color)
ggplot(diamonds,aes(x=clarity,y=carat,col=price))+
geom_point(alpha=0.5)
# Scatter plot: carat (x), price (y), clarity (color)
ggplot(diamonds,aes(x=carat,y=price,col=clarity))+
geom_point()
# Dot plot with jittering
ggplot(diamonds,aes(x=clarity,y=carat,col=price))+
geom_point(alpha=0.5,position = "jitter")
# Shown in the viewer:
ggplot(mtcars, aes(x = cyl, y = wt)) +
geom_point()
# Solutions:
# 1 - With geom_jitter()
ggplot(mtcars, aes(x = cyl, y = wt)) +
geom_jitter()
# 2 - Set width in geom_jitter()
ggplot(mtcars, aes(x = cyl, y = wt)) +
geom_jitter(width=0.1)
# 3 - Set position = position_jitter() in geom_point() ()
ggplot(mtcars, aes(x = cyl, y = wt)) +
geom_point(position = position_jitter(0.1))
# Examine the structure of Vocab
str(Vocab)
# Basic scatter plot of vocabulary (y) against education (x). Use geom_point()
ggplot(Vocab, aes(x=education, y=vocabulary))+
geom_point()
# Use geom_jitter() instead of geom_point()
ggplot(Vocab, aes(x=education, y=vocabulary))+
geom_jitter()
# Using the above plotting command, set alpha to a very low 0.2
ggplot(Vocab, aes(x=education, y=vocabulary))+
geom_jitter(alpha=0.2)
# Using the above plotting command, set the shape to 1
ggplot(Vocab, aes(x=education, y=vocabulary))+
geom_jitter(alpha=0.2,shape=1)
# 1 - Make a univariate histogram
ggplot(mtcars, aes(x = mpg)) +
geom_histogram()
# 2 - Plot 1, plus set binwidth to 1 in the geom layer
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(binwidth=1)
# 3 - Plot 2, plus MAP ..density.. to the y aesthetic (i.e. in a second aes() function)
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(binwidth=1,aes(y=..density..))
# 4 - plot 3, plus SET the fill attribute to "#377EB8"
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(binwidth=1,aes(y=..density.., fill="#377EB8"))
mtcars$am<-as.factor(mtcars$am)
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill =am)) +
geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill =am)) +
geom_bar(position="stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill =am)) +
geom_bar(position="fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill =am)) +
geom_bar(position="dodge")
# 1 - The last plot form the previous exercise
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = "dodge")
# 2 - Define posn_d with position_dodge()
posn_d <- position_dodge(0.2)
# 3 - Change the position argument to posn_d
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d)
# 4 - Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d, alpha = 0.6)
# A basic histogram, add coloring defined by cyl
ggplot(mtcars, aes(mpg,fill=cyl)) +
geom_histogram(binwidth = 1)
# Change position to identity
ggplot(mtcars, aes(mpg,fill=cyl)) +
geom_histogram(binwidth = 1,position="identity")
# Change geom to freqpoly (position is identity by default)
ggplot(mtcars, aes(mpg,col=cyl)) +
geom_freqpoly(binwidth = 1)
# Example of how to use a brewed color palette
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
# Use str() on Vocab to check out the structure
str(Vocab)
# Plot education on x and vocabulary on fill
# Use the default brewed color palette
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Final plot of last exercise
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Definition of a set of blue colors
blues <- brewer.pal(9, "Blues") # from the RColorBrewer package
# 1 - Basic histogram plot command
ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth = 1)
# 2 - Plot 1, Expand aesthetics: am onto fill
ggplot(mtcars, aes(x=mpg, fill=am)) +
geom_histogram(binwidth = 1)
# 3 - Plot 2, change position = "dodge"
ggplot(mtcars, aes(x=mpg, fill=am)) +
geom_histogram(binwidth = 1, position="dodge")
# 4 - Plot 3, change position = "fill"
ggplot(mtcars, aes(x=mpg, fill=am)) +
geom_histogram(binwidth = 1, position="fill")
# 5 - Plot 4, plus change position = "identity" and alpha = 0.4
ggplot(mtcars, aes(x=mpg, fill=am)) +
geom_histogram(binwidth = 1, position="identity",alpha=0.4)
# 6 - Plot 5, plus change mapping: cyl onto fill
ggplot(mtcars, aes(x=mpg, fill=cyl)) +
geom_histogram(binwidth = 1, position="identity",alpha=0.4)
# Basic line plot
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_line()
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
# Check the structure as a starting point
str(fish.species)
# Recreate the plot shown on the right
ggplot(fish.tidy, aes(x = Year, y = Capture, col=Species)) +
geom_line()
# The old way (shown)
plot(mpg ~ wt, data = mtcars) # formula notation
with(mtcars, plot(wt, mpg)) # x, y notation
# Using ggplot:
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point()
# Using qplot:
qplot(y=mpg, x=wt, data = mtcars)
# cyl and am are factors, wt is numeric
class(mtcars$cyl)
class(mtcars$am)
class(mtcars$wt)
# "Basic" dot plot, with geom_point():
ggplot(mtcars, aes(cyl, wt, col = am)) +
geom_point(position = position_jitter(0.2, 0))
# 1 - "True" dot plot, with geom_dotplot():
ggplot(mtcars, aes(cyl, wt, fill = am)) +
geom_dotplot(binaxis = "y", stackdir = "center")
# 2 - qplot with geom "dotplot", binaxis = "y" and stackdir = "center"
qplot(
x=cyl, y=wt,
data = mtcars,
fill = am,
geom = "dotplot",
binaxis = "y",
stackdir = "center"
)
# ChickWeight is available in your workspace
# 1 - Check out the head of ChickWeight
head(ChickWeight)
# 2 - Basic line plot
ggplot(ChickWeight, aes(x = Time, y = weight)) +
geom_line(aes(group = Chick))
# 3 - Take plot 2, map Diet onto col.
ggplot(ChickWeight, aes(x = Time, y = weight,col=Diet)) +
geom_line(aes(group = Chick))
# 4 - Take plot 3, add geom_smooth()
ggplot(ChickWeight, aes(x = Time, y = weight,col=Diet)) +
geom_line(aes(group = Chick),alpha=0.3)+
geom_smooth(lwd=2, se=FALSE)
# titanic is avaliable in your workspace
# 1 - Check the structure of titanic
str(titanic)
# Dot plot with jittering
ggplot(diamonds,aes(x=clarity,y=carat,col=price))+
geom_point(alpha=0.5,position = "jitter")
knitr::opts_chunk$set(echo = TRUE)
# Plot 1: change the LOESS span
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
# Add span below
geom_smooth(span=0.7, se = FALSE)
# Plot 2: Set the second stat_smooth() to use LOESS with a span of 0.7
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
# Change method and add span below
stat_smooth(method = "loess",span=0.7, aes(group = 1),
se = FALSE, col = "black")
# Plot 3: Set col to "All", inside the aes layer of stat_smooth()
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
stat_smooth(method = "loess",
# Add col inside aes()
aes(group = 1,col="All"),
# Remove the col argument below
se = FALSE, span = 0.7)
# Plot 4: Add scale_color_manual to change the colors
myColors <- c(brewer.pal(3, "Dark2"), "black")
# Code to create the cyl_am col and myCol vector
mtcars$cyl_am <- paste(mtcars$cyl, mtcars$am, sep = "_")
myCol <- rbind(brewer.pal(9, "Blues")[c(3,6,8)],
brewer.pal(9, "Reds")[c(3,6,8)])
# Base layers
m <- ggplot(mtcars, aes(x = cyl, y = wt))
# Draw dynamite plot
m +
stat_summary(fun.y = mean, geom = "bar", fill = "skyblue") +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "errorbar", width = 0.1)
plot(airquality)
plot(airquality)
hist(airquality$Temp) #可以绘柱状图，因为温度是数值型变量
#加一个横坐标
hist(airquality$Temp, xlab = "Temperature")
hist(airquality$Temp) #可以绘柱状图，因为温度是数值型变量
#加一个标题
hist(airquality$Wind, xlab = "Temperature", main="The Distribution of Temperature")
#加一个标题
hist(airquality$Temp, xlab = "Temperature", main="The Distribution of Temperature")
#频率变密度
hist(airquality$Wind, xlab = "Temperature",freq = FALSE, main="The Distribution of Temperature",col="red")
#频率变密度
hist(airquality$Temp, xlab = "Temperature",freq = FALSE, main="The Distribution of Temperature",col="red")
#给点颜色看看
hist(airquality$Temp, xlab = "Temperature",freq = FALSE, main="The Distribution of Temperature",col="red")
#频率变密度
hist(airquality$Temp, xlab = "Temperature",freq = FALSE, main="The Distribution of Temperature")
#绘制箱图（数值型变量）
boxplot(airquality$Temp)
boxplot(airquality$Temp, xlab="Temperature",ylab="F")
#按月份，给每一个月的温度绘箱图
#month是分类变量
boxplot(Temp~Month,airquality,xlab="month",
ylab="Temperature (F)")
plot(airquality$Wind,airquality$Temp)
plot(Wind,Temp,airquality)
plot(Wind,Temp,airquality)
plot(Wind,Temp,airquality)
plot(Wind,Temp,airquality)
plot(airquality$Wind,airquality$Temp)
plot(Wind,Temp,airquality)
plot(Wind,Temp,airquality)
plot(Wind~Temp,airquality$)
plot(Wind~Temp,airquality)
hist(Wind,airquality)
hist(airquality$Wind)
#with() 更简便的绘图函数，
# 再不用每个变量都引用数据集
with(airquality, plot(Wind, Temp))
title(main="wind and temp in NYC") #使用title进行修饰
#with() 更简便的绘图函数，
# 再不用每个变量都引用数据集
with(airquality, plot(Wind~Temp))
title(main="wind and temp in NYC") #使用title进行修饰
#with() 更简便的绘图函数，
# 再不用每个变量都引用数据集
with(airquality, plot(Wind,Temp))
title(main="wind and temp in NYC") #使用title进行修饰
#with() 更简便的绘图函数，
# 再不用每个变量都引用数据集
with(airquality, plot(Wind~Temp))
title(main="wind and temp in NYC") #使用title进行修饰
#另外一种方式添加标题，一样的结果
with(airquality, plot(Wind, Temp,pch=5,
main="wind and temp in NYC"))
#另外一种方式添加标题，一样的结果
with(airquality, plot(Wind, Temp,pch=4,
main="wind and temp in NYC"))
#另外一种方式添加标题，一样的结果
with(airquality, plot(Wind, Temp,pch=3,
main="wind and temp in NYC"))
#另外一种方式添加标题，一样的结果
with(airquality, plot(Wind, Temp,pch=7,
main="wind and temp in NYC"))
#另外一种方式添加标题，一样的结果
with(airquality, plot(Wind, Temp,
main="wind and temp in NYC"))
#有用的 type="n"
with(airquality, plot(Wind, Temp,
main="Wind and Temp in NYC",
type="n"))
with(airquality, plot(Wind, Temp,
main="Wind and Temp in NYC",
type="n"))
with(subset(airquality, Month==9),
points(Wind, Temp, col="red"))
#有用的 type="n"
with(airquality, plot(Wind, Temp,
main="Wind and Temp in NYC",
type="n"))
with(airquality, plot(Wind, Temp,
main="Wind and Temp in NYC",
type="n"))
with(subset(airquality, Month==9),
points(Wind, Temp, col="red"))
with(airquality, plot(Wind, Temp,
main="Wind and Temp in NYC",
type="n"))
with(subset(airquality, Month==9),
points(Wind, Temp, col="red"))
with(subset(airquality, Month==8),
points(Wind, Temp, col="blue"))
with(subset(airquality, Month==7),
points(Wind, Temp, col="green"))
with(subset(airquality, Month %in% c(5,6)),
points(Wind, Temp, col="black"))
fit<-lm(Temp~Wind, airquality) #拟合一个回归模型
abline(fit,lwd=2) #把回归线加进去
#加入图例，说明颜色含义
legend("topright", pch=1, #右上角，空心圆点
col=c("red","blue","green","black"),
legend=c("Sep","August","July","Other"))
#使用基本函数绘图，需要事先计划，运行很多函数，
#可以直观的反映我们绘图的逻辑
#图例要仔细一一对应
par("bg") #背景颜色，默认白色
par("col") # 作图颜色，默认黑色
par("mar") #(bottom, left, top, right) 图片边距
par("mfrow") #默认一行一列
?par
?plot
#通过改变全局参数，使面板中呈现多幅图片
par(mfrow = c(2,2)) #设置成2行两列
hist(airquality$Temp)
hist(airquality$Temp, freq = FALSE)
hist(airquality$Temp, freq = FALSE, col="blue")
hist(airquality$Temp, freq = FALSE, col="blue")
lines(density(airquality$Temp))
par(mfrow = c(1,1))
truehist(airquality$Temp)
lines(density(airquality$Temp))
#通过改变全局参数，使面板中呈现多幅图片
par(mfrow = c(2,2)) #设置成2行两列
hist(airquality$Temp)
hist(airquality$Temp, freq = FALSE)
hist(airquality$Temp, freq = FALSE, col="blue")
hist(airquality$Temp, freq = FALSE, col="blue")
lines(density(airquality$Temp))
par(mfrow = c(1,1))
truehist(airquality$Temp)
?truehist
#通过改变全局参数，使面板中呈现多幅图片
par(mfrow = c(2,2)) #设置成2行两列
hist(airquality$Temp)
hist(airquality$Temp, freq = FALSE)
hist(airquality$Temp, freq = FALSE, col="blue")
hist(airquality$Temp, freq = FALSE, col="blue")
lines(density(airquality$Temp))
par(mfrow = c(1,1))
truehist(airquality$Temp)
lines(density(airquality$Temp))
#两行一列
par(mfcol = c(2,1))
hist(airquality$Temp)
hist(airquality$Wind)
#lattice 绘图实践
library(lattice) #需要先安装install.packages("lattice")
xyplot(Temp~Ozone, data=airquality) #散点图,还没有考察交互关系
airquality$Month<-factor(airquality$Month)
#查看不同月份下，前面两个变量的关系
xyplot(Temp~Ozone|Month, data=airquality,
layout=c(5,1)) #画1行5列
#查看不同月份下，前面两个变量的关系
xyplot(Temp~Ozone|Month, data=airquality
) #画1行5列
#查看不同月份下，前面两个变量的关系
xyplot(Temp~Ozone|Month, data=airquality,
layout=c(5,1)) #画1行5列
#查看不同月份下，前面两个变量的关系
xyplot(Temp~Ozone|Month, data=airquality,
layout=c(1,5)) #画1行5列
#查看不同月份下，前面两个变量的关系
xyplot(Temp~Ozone|Month, data=airquality,
layout=c(5,1)) #画1行5列
q<-xyplot(Temp~Ozone, data=airquality)
q<-xyplot(Temp~Ozone, data=airquality)
print(q) #lattice是先生成一个类对象，然后打印出来
q<-xyplot(Temp~Ozone, data=airquality)
q<-xyplot(Temp~Ozone, data=airquality)
print(q) #lattice是先生成一个类对象，然后打印出来
?boxplot
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
# *add* notches (somewhat funny here):
boxplot(count ~ spray, data = InsectSprays,
notch = TRUE, add = TRUE, col = "blue")
?hist
